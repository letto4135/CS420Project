#pragma checksum "/Users/alife/Other/CS420Project/RestaurantFrontEnd/Pages/Kitchen/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fba3b607d6fe47401194956e7d3832e3cad01cfc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(RestaurantFrontEnd.Pages.Kitchen.Pages_Kitchen_Index), @"mvc.1.0.razor-page", @"/Pages/Kitchen/Index.cshtml")]
namespace RestaurantFrontEnd.Pages.Kitchen
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/alife/Other/CS420Project/RestaurantFrontEnd/Pages/_ViewImports.cshtml"
using RestaurantFrontEnd;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fba3b607d6fe47401194956e7d3832e3cad01cfc", @"/Pages/Kitchen/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d604ee56b1ee77fb7b5cd928741852730b0660c4", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Kitchen_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<style>
</style>
<h1 style=""margin-bottom:3rem;"">Kitchen Staff</h1>
<div class=""row"">
    <div class=""col-12"">
        <h3>Food Orders</h3>
        <table class=""table table-striped"">
            <thead class=""thead-dark"">
                <tr>
                    <th scope=""col"">Order Number</th>
                    <th scope=""col"">Table Number</th>
                    <th scope=""col"">Food Order</th>
                    <th scope=""col"">Remove</th>
                </tr>
            </thead>
            <tbody id=""availableFoodOrders"">
                <tr>
                    <th scope=""row"">36</th>
                    <td>23</td>
                    <td>
                        <div>
                            <p>Shrimp Alfredo</p>
                            <p style=""display:none;"">18</p>
                        </div>
                        <div>
                            <p>Chicken Alfredo</p>
                            <p style=""display:none;"">17</p>
                        </div>
                   ");
            WriteLiteral(@" </td>
                    <td onclick=""deleteTableRow(this)""><button type=""button"" class=""btn btn-danger"">X</button></td>
                </tr>
                <tr>
                    <th scope=""row"">28</th>
                    <td>24</td>
                    <td>
                        <div>
                            <p>Asiago Tortelloni Alfredo with Grilled Chicken</p>
                            <p style=""display:none;"">19</p>
                        </div>
                        <div>
                            <p>Eggplant Parmigiana</p>
                            <p style=""display:none;"">15</p>
                        </div>
                        <div>
                            <p>Five Cheese Ziti al Forno</p>
                            <p style=""display:none;"">14</p>
                        </div>
                    </td>
                    <td onclick=""deleteTableRow(this)""><button type=""button"" class=""btn btn-danger"">X</button></td>
                </tr>
                <tr>
           ");
            WriteLiteral(@"         <th scope=""row"">32</th>
                    <td>26</td>
                    <td>
                        <div>
                            <p>Seafood Alfredo</p>
                            <p style=""display:none;"">18</p>
                        </div>
                        <div>
                            <p>Steak Alfredo</p>
                            <p style=""display:none;"">17</p>
                        </div>
                    </td>
                    <td onclick=""deleteTableRow(this)""><button type=""button"" class=""btn btn-danger"">X</button></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<!-- Common scripts -->
<script>
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
</script>

<!-- Scripts for Food Orders -->
<script>
    async function getAvailableFoodOrders() {
        let timer = 3;
        while (true) {
            var xhr = new XMLHttpRequest();
            xhr.open(""GET"", ""https://localhost:44448/a");
            WriteLiteral(@"pi/Source/GetFoodOrder"", true);
            var jsonResponse
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200) {
                        var data = xhr.responseText;
                        jsonResponse = JSON.parse(data);

                        if (jsonResponse !== ""False"") {
                            jsonResponse = JSON.parse(jsonResponse);

                            var orderNumber = jsonResponse.OrderNumber
                            var tableNumber = jsonResponse.TableNumber;
                            var food = jsonResponse.Food;

                            var newRowText = `
                                                <th scope=""row"">${orderNumber}</th>
                                                <td>${tableNumber}</td>
                                                <td>
                                                    <div>
                                                        <p>Seafood Alfr");
            WriteLiteral(@"edo</p>
                                                        <p style=""display:none;"">18</p>
                                                    </div>
                                                    <div>
                                                        <p>Steak Alfredo</p>
                                                        <p style=""display:none;"">17</p>
                                                    </div>
                                                </td>
                                                <td onclick=""deleteTableRow(this)""><button type=""button"" class=""btn btn-danger"">X</button></td>
                                             `

                            var list = document.getElementById(""availableFoodOrders"");
                            var newRow = list.insertRow(list.rows.length);
                            newRow.innerHTML = newRowText;
                            if (timer >= .5) {
                                timer -= .25;
                           ");
            WriteLiteral(@" }
                        } else {
                            if (timer < 5) {
                                timer += .25;
                            }
                        }
                    }
                }
            };

            xhr.send(null);

            await sleep(timer * 1000);
        }
    }

    function foodReady(orderNumber, tableNumber, food) {
        // post the table seated event
        var xhr = new XMLHttpRequest();
        xhr.open(""POST"", ""https://localhost:44448/api/Source/FoodReady"", true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(JSON.stringify({
            ""orderNumber"": orderNumber,
            ""tableNumber"": tableNumber,
            ""food"": food,
            ""timeStamp"": new Date().toISOString()
        }));
    }

    function deleteTableRow(x) {
        var list = document.getElementById(""availableFoodOrders"");
        var row = x.parentElement;
        var rowData = row.children;
        var foodData = rowData[2].chi");
            WriteLiteral(@"ldren;
        var orderNumber = parseInt(rowData[0].innerText);
        var tableNumber = parseInt(rowData[1].innerText);
        var food = [];

        for (var i = 0; i < foodData.length; i++) {
            foodName = foodData[i].children[0].innerText;
            foodPrice = parseInt(foodData[i].children[1].innerText);
            food.push(
                {
                    foodName: foodPrice
                }
            );
        }

        foodReady(orderNumber, tableNumber, food);

        list.deleteRow(row.rowIndex - 1);
    }

    getAvailableFoodOrders()
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<RestaurantFrontEnd.Pages.Kitchen.IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<RestaurantFrontEnd.Pages.Kitchen.IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<RestaurantFrontEnd.Pages.Kitchen.IndexModel>)PageContext?.ViewData;
        public RestaurantFrontEnd.Pages.Kitchen.IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
